'use strict'

/*1) Создайте функцию, которая принимает в себя целое число минут и возвращает время в нужном формате строки. (Смотри пример). Обратите внимание на окончание слова "час" - оно меняется в зависимости от цифры. Если вместо аргумента приходит не число, дробное или отрицательное число - функция возвращает строку "Ошибка, проверьте данные"

Внимание! Давайте пока ограничимся максимум 600ю минутами (10 часов). Так как проверки на большие числа будут раздувать код (33 часа, 31 час, 11 часов и тд). Этого будет достаточно и код будет проверять именно этот промежуток (1 - 10 часов). Но вы можете реализовать и полный скрипт, он тоже должен проходить тесты.

Пример:

getTimeFromMinutes(150) => "Это 2 часа и 30 минут"

getTimeFromMinutes(50) => "Это 0 часов и 50 минут"

getTimeFromMinutes(0) => "Это 0 часов и 0 минут"

getTimeFromMinutes(-150) => "Ошибка, проверьте данные" 
*/

// Место для первой задачи
function getTimeFromMinutes (time){
  if (time < 0 || time % 1 != 0 || typeof(time) != 'number') {
    return "Ошибка, проверьте данные";
  }
  const hours = Math.floor(time / 60),
        minutes = time % 60,
        wordsHour = ['час', 'часа', 'часов'],
        wordsMinutes = ['минута','минуты', 'минут'];
  function checkWords(time,words){
    const checkArr = [2, 0, 1, 1, 1, 2];
    return words[time % 100 > 4 && time % 100 < 20 ? 2 : checkArr[Math.min(time % 10, 5)]];
  };
  return `Это ${hours} ${checkWords(hours,wordsHour)} и ${minutes} ${checkWords(minutes, wordsMinutes)}`;
}

/*2) Напишите функцию, которая принимает в себя 4 числа и возвращает самое большее из них. Если один из аргументов не является числом или их меньше 4 - возвращается 0. Дробные числа разрешены.

Пример:

findMaxNumber(1, 5, 6.6, 11); =>  11

findMaxNumber(1, 5, '6', '10');  =>  0
 */

// Место для второй задачи

function findMaxNumber(num1, num2, num3, num4) {
  const sum = num1 + num2 + num3 + num4;
  return (typeof(sum) != 'number' || isNaN(sum)) ? 0 : Math.max(num1, num2, num3, num4)
};